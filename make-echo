# Compiler Flags

CXX=g++
CXXFLAGS=-std=c++1z -Wall -O2

# Inputs

ECHO_HOME=lib/echo/echo
INCLUDE=-I $(ECHO_HOME)/include -I $(ECHO_HOME)/src -I include
SRC_DIR=src

LIB_DIR=-L $(ECHO_HOME)/lib
STATIC_LIBS=-lkp_kvstore
DYNAMIC_LIBS=-pthread
LDFLAGS=$(LIB_DIR) -Wl,-Bstatic $(STATIC_LIBS) -Wl,-Bdynamic $(DYNAMIC_LIBS)

# Artifacts

BIN_DIR=bin

# Targets

all : echo-baseline echo-scaling

echo-baseline :
	$(CXX) -c $(CXXFLAGS) $(INCLUDE) $(SRC_DIR)/$@.cpp -o $(BIN_DIR)/$@.o
	$(CXX) $(CXXFLAGS) $(BIN_DIR)/$@.o $(LDFLAGS) -o $(BIN_DIR)/$@

echo-scaling : opcode workload jsoncpp
	$(CXX) -c $(CXXFLAGS) $(INCLUDE) $(SRC_DIR)/$@.cpp -o $(BIN_DIR)/$@.o
	$(CXX) $(CXXFLAGS) $(BIN_DIR)/$@.o $(BIN_DIR)/opcode.o $(BIN_DIR)/workload.o $(BIN_DIR)/jsoncpp.o $(LDFLAGS) -o $(BIN_DIR)/$@

opcode :
	$(CXX) -c $(CXXFLAGS) -I include $(SRC_DIR)/utils/$@.cpp -o $(BIN_DIR)/$@.o

workload :
	$(CXX) -c $(CXXFLAGS) -I include $(SRC_DIR)/utils/$@.cpp -o $(BIN_DIR)/$@.o

jsoncpp :
	$(CXX) -c $(CXXFLAGS) -I include $(SRC_DIR)/utils/$@.cpp -o $(BIN_DIR)/$@.o

clean :
	rm -rf bin/*
